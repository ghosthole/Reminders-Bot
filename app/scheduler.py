from app.database import (
    check_date_format,
    get_reminders,
    get_all_users,
    mark_reminder_as_completed
)
from app.keyboards import (set_new_date)
from datetime import datetime
from aiogram import Bot
import logging



async def send_reminders(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    logging.info("–§—É–Ω–∫—Ü–∏—è send_reminders –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å!")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    users = await get_all_users()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

    for user_id in users:
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")  # –õ–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_date_format = await check_date_format(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–ï–ó —Å–µ–∫—É–Ω–¥ –∏ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        now = datetime.now().replace(second=0, microsecond=0)
        logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–±–µ–∑ —Å–µ–∫—É–Ω–¥): {now}")

        reminders = await get_reminders(user_id)
        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {reminders}")

        for title, description, creation_date, completion_date in reminders:
            # –ï—Å–ª–∏ completion_date —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –≤ –ë–î, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë
            if isinstance(completion_date, str):
                completion_date = datetime.strftime(
                    completion_date, "%d/%m/%Y %H:%M" if user_date_format == 0 else "%d.%m.%Y %H:%M"
                )

            # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã —É –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            completion_date = completion_date.replace(second=0, microsecond=0)

            logging.info(f"–í—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Å–µ–∫—É–Ω–¥): {completion_date}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã (–≤ —Å–ª—É—á–∞–µ –º–µ–ª–∫–∏—Ö —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–æ–≤)
            if abs((now - completion_date).total_seconds()) < 60:
                text = f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n\nüìå {title}\n\nüöÄ <b>–ù—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏?</b> –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è."
                if description and description.strip():
                    text += f"\nüí¨ {description}"
                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")
                await bot.send_message(user_id, text, parse_mode="HTML", reply_markup=set_new_date)

                # –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                await mark_reminder_as_completed(user_id, completion_date)