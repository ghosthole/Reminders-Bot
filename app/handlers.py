from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime

from app.keyboards import *
from app.database import *

router = Router()


class NewReminder(StatesGroup):
    title = State()
    description = State()
    date = State()


def start_text():
    text = f"""<b>–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞!</b>
–ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–±—ã—Ç—ã—Ö –≤—Å—Ç—Ä–µ—á, –¥–µ–ª –∏ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –º–Ω–µ, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∏ —è –≤—Å–µ –≤–æ–∑—å–º—É –Ω–∞ —Å–µ–±—è.

üïí <b>–ß—Ç–æ —è —É–º–µ—é?</b>

‚è∞ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è
üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚úèÔ∏è –£–¥–∞–ª—è—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üöÄ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –æ —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∏ —è –≤—Å–µ –∑–∞–ø–æ–º–Ω—é!</b>

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, <b>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</b> –Ω–∏–∂–µ –∏–ª–∏ <b>–æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É</b>:
üëâ <b>/new</b> ‚Äì —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    return text


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    username = message.from_user.username
    user_id = message.from_user.id
    await state.clear()
    if not await check_user(user_id):
        await message.answer("üåç <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å</b>\n\n–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —Ç–æ—á–Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—à–∏–±—ë—à—å—Å—è, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—Å—ë –∏–∑–º–µ–Ω–∏—Ç—å. üòâ", reply_markup=get_timezone_keyboard(), parse_mode="HTML")
        await add_user(user_id, username)
    else:
        
        await message.answer_photo(
        photo="https://media.wired.com/photos/653bddf62692abf70732f95b/master/pass/Google-Calendar-Appointments-Gear-GettyImages-1385868923.jpg",
        caption=start_text(),
        reply_markup=menu_keyboard,
        parse_mode="HTML"
    )


time_zones_list = [f"{i:+}" for i in range(-12, 15)]
@router.callback_query(F.data.startswith("utc"))
async def choose_time_zone(callback: CallbackQuery):
    if callback.data[3:] in time_zones_list:
        await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC{callback.data[3:]}")
        await callback.answer()
        await callback.message.answer_photo(
            photo="https://media.wired.com/photos/653bddf62692abf70732f95b/master/pass/Google-Calendar-Appointments-Gear-GettyImages-1385868923.jpg",
            caption=start_text(),
            reply_markup=menu_keyboard,
            parse_mode="HTML"
        )


@router.message(F.text == "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_button(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(NewReminder.title)
    await message.answer(
        "üìù –ö–∞–∫ –±—É–¥–µ—Ç <b>–Ω–∞–∑—ã–≤–∞—Ç—å—Å—è</b> —Ç–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", parse_mode="HTML"
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> ‚Äì –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üîï <b>–¢–∏—à–∏–Ω–∞</b> ‚Äì –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b> ‚Äì –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–∞—Ç—ã.


–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ! ‚¨áÔ∏è""",
        reply_markup=settings_keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "date_format")
async def date_format(callback: CallbackQuery):
    user_id = callback.from_user.id
    if await check_date_format(user_id) == 0:
        await callback.message.edit_text(
            """üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º <b>—Ñ–æ—Ä–º–∞—Ç–µ –≤–∞–º —É–¥–æ–±–Ω–æ</b> –≤–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É:

1Ô∏è‚É£ <b>–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25/02/2025)
2Ô∏è‚É£ <b>–¥–¥.–º–º.–≥–≥–≥–≥ –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025)

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏ –º—ã –∑–∞–ø–æ–º–Ω–∏–º –≤–∞—à –≤—ã–±–æ—Ä! ‚úÖ                          
""",
            reply_markup=default_date_format_keyboard,
            parse_mode="HTML",
        )
    elif await check_date_format(user_id) == 1:
        await callback.message.edit_text(
            """üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–º <b>—Ñ–æ—Ä–º–∞—Ç–µ –≤–∞–º —É–¥–æ–±–Ω–æ</b> –≤–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É:

1Ô∏è‚É£ <b>–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25/02/2025)
2Ô∏è‚É£ <b>–¥–¥.–º–º.–≥–≥–≥–≥ –ß–ß:–ú–ú</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.02.2025)

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏ –º—ã –∑–∞–ø–æ–º–Ω–∏–º –≤–∞—à –≤—ã–±–æ—Ä! ‚úÖ                          
""",
            reply_markup=changed_date_format_keyboard,
            parse_mode="HTML",
        )


@router.callback_query(F.data == "leave")
async def leave_first(callback: CallbackQuery):
    await callback.message.edit_text(
        """üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>

–£–ø—Å...–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω.""",
        reply_markup=back_to_date_format,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "back_to_date_format")
async def back_to_date(callback: CallbackQuery):
    await date_format(callback)


@router.callback_query(F.data == "change_to_second")
async def change_to_second(callback: CallbackQuery):
    user_id = callback.from_user.id
    await update_date_format(user_id)
    await callback.message.edit_text(
        """üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>
                                     
–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ä–º–∞—Ç 2Ô∏è‚É£<b>–¥–¥.–º–º.–≥–≥–≥–≥ –ß–ß:–ú–ú</b> –≤—ã–±—Ä–∞–Ω.
                                     
üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.""",
        reply_markup=back_to_menu_keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "change_to_first")
async def change_to_first(callback: CallbackQuery):
    user_id = callback.from_user.id
    await update_date_format(user_id)
    await callback.message.edit_text(
        """üìÖ <b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>
                                     
–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ä–º–∞—Ç 1Ô∏è‚É£<b>–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú</b> –≤—ã–±—Ä–∞–Ω.
                                     
üëá –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.""",
        reply_markup=back_to_menu_keyboard,
        parse_mode="HTML",
    )


@router.message(Command("new"))
async def title_step(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(NewReminder.title)
    await message.answer(
        "üìù –ö–∞–∫ –±—É–¥–µ—Ç <b>–Ω–∞–∑—ã–≤–∞—Ç—å—Å—è</b> —Ç–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", parse_mode="HTML"
    )


@router.message(NewReminder.title)
async def description_step(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(NewReminder.description)
    await message.answer(
        "üí¨ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ç–≤–æ–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
        reply_markup=skip_step_keyboard,
        parse_mode="HTML",
    )


@router.message(NewReminder.description)
async def date_step(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(NewReminder.date)
    await message.answer(
        f"üìÖ –û—Ç–ª–∏—á–Ω–æ, {message.from_user.first_name}! –ù–∞–ø–∏—à–∏ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</b>, –∫–æ–≥–¥–∞ —è –¥–æ–ª–∂–µ–Ω –±—É–¥—É —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ–±—è.\n–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é). –§–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: 24/02/2025 18:13",
        parse_mode="HTML",
    )


@router.message(NewReminder.date)
async def end_step(message: Message, state: FSMContext):
    user_date = None
    user_id = message.from_user.id
    try:
        user_date_format = await check_date_format(user_id)
        today_date = datetime.now().strftime("%d/%m/%Y %H:%M") if user_date_format == 0 else datetime.now().strftime("%d.%m.%Y %H:%M")
        today_formated_date = datetime.strptime(today_date, "%d/%m/%Y %H:%M") if user_date_format == 0 else datetime.strptime(today_date, "%d.%m.%Y %H:%M")

        try:
            user_date = datetime.strptime(message.text, "%d/%m/%Y %H:%M") if user_date_format == 0 else datetime.strptime(message.text, "%d.%m.%Y %H:%M")
            print(f"–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {message.text}")

            if user_date <= today_formated_date:
                await message.answer(
                    "‚ùå –≠—Ç–∞ –¥–∞—Ç–∞ —Ç–µ–ø–µ—Ä—å –≤ –ø—Ä–æ—à–ª–æ–º :(\n"
                    f"–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú' if user_date_format == 0 else '–¥–¥.–º–º.–≥–≥–≥–≥ –ß–ß:–ú–ú'}. "
                    "–§–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n"
                    f"–ü—Ä–∏–º–µ—Ä: {'24/02/2025 18:13' if user_date_format == 0 else '24.02.2025 18:13'}"
                )
                await state.set_state(NewReminder.date)
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞.")
                return

        except ValueError:
            print("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞—Ç—É –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            await message.answer(
                "‚ùå –¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "
                f"{'–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú' if user_date_format == 0 else '–¥–¥.–º–º.–≥–≥–≥–≥ –ß–ß:–ú–ú'}. "
                "–§–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n"
                f"–ü—Ä–∏–º–µ—Ä: {'24/02/2025 18:13' if user_date_format == 0 else '24.02.2025 18:13'}"
            )
            await state.set_state(NewReminder.date)
            return

    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return
    if user_date is not None:
        await state.update_data(date=user_date.strftime("%d/%m/%Y %H:%M"))
    else:
        print("–û—à–∏–±–∫–∞: user_date –æ—Å—Ç–∞–ª—Å—è None –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    data = await state.get_data()

    if data["description"] != " ":
        await message.answer(
            f"""üéâ –£—Ä–∞, –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏! –ü—Ä–æ–≤–µ—Ä—å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ.
                             
‚ñ´Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>\nüìå {data["title"]}

‚ñ´Ô∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>\nüìù {data["description"]}

‚ñ´Ô∏è <b>–î–∞—Ç–∞</b>\nüóìÔ∏è {data["date"]}

–ï—Å–ª–∏ —Ç—ã —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫—É –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"</b>""",
            reply_markup=check_data_keyboard,
            parse_mode="HTML",
        )
    else:
        await message.answer(
            f"""üéâ –£—Ä–∞, –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏! –ü—Ä–æ–≤–µ—Ä—å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ.
                             
‚ñ´Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>\nüìå {data["title"]}

‚ñ´Ô∏è <b>–î–∞—Ç–∞</b>\nüóìÔ∏è {data["date"]}

–ï—Å–ª–∏ —Ç—ã —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫—É –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"</b>""",
            reply_markup=check_data_keyboard,
            parse_mode="HTML",
        )


@router.callback_query(F.data == "skip")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.update_data(description=" ")
    await state.set_state(NewReminder.date)
    await callback.message.edit_text(
        f"üìÖ –û—Ç–ª–∏—á–Ω–æ, {callback.from_user.first_name}! –ù–∞–ø–∏—à–∏ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</b>, –∫–æ–≥–¥–∞ —è –¥–æ–ª–∂–µ–Ω –±—É–¥—É —É–≤–µ–¥–æ–º–∏—Ç—å —Ç–µ–±—è.\n–¥–¥/–º–º/–≥–≥–≥–≥ –ß–ß:–ú–ú (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é). –§–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: 24/02/2025 18:13",
        parse_mode="HTML",
    )


@router.callback_query(F.data == "again")
async def again_data(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(NewReminder.title)
    await callback.message.edit_text(
        "üìù –ö–∞–∫ –±—É–¥–µ—Ç <b>–Ω–∞–∑—ã–≤–∞—Ç—å—Å—è</b> —Ç–≤–æ—ë –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", parse_mode="HTML"
    )


@router.callback_query(F.data == "true")
async def true_data(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    data = await state.get_data()
    await add_reminder(user_id, data["title"], data["description"], data["date"])
    await callback.message.edit_text(
        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=back_to_menu_keyboard
    )
    await state.clear()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await state.clear()
    await callback.answer()
    await update_fun_fact(user_id)
    await callback.message.answer_photo(
        photo="https://img.freepik.com/premium-photo/calendar-with-marked-date-3d-render-illustration-purple-floating-organizer-with-rings-check-points-noted-with-mark-day_75114-1071.jpg",
        caption=f"""<b>üìç –ú–µ–Ω—é</b>

<b>üìö –ê —Ç—ã –∑–Ω–∞–ª, —á—Ç–æ {await get_fun_fact(user_id)}</b>
–ó–Ω–∞–µ—à—å, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ –ø–æ–º–æ—â–Ω–∏–∫–∏ –æ—Ç –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏!
ü§Ø –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–ª–∞ –≤ –¥–æ–ª–≥–∏–π —è—â–∏–∫ –∏ –¥–µ—Ä–∂–∞—Ç—å –≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.

–°–µ–≥–æ–¥–Ω—è ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –¥–∞–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª. üí™ –ú–æ–∂–µ—Ç, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É, –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥—Ä—É–≥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ–±–µ –≤—ã–ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã? üíß

–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ! üöÄ –¢—ã —Å–∞–º —É–¥–∏–≤–∏—à—å—Å—è, –∫–∞–∫ –º–Ω–æ–≥–æ –º–æ–∂–Ω–æ —É—Å–ø–µ—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.

–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, <b>–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É</b> –Ω–∏–∂–µ –∏–ª–∏ <b>–æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É</b>:
üëâ <b>/new</b> ‚Äì —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ""",
        reply_markup=menu_keyboard,
        parse_mode="HTML",
    )


@router.message(F.text == "üìñ –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
async def check_reminders(message: Message):
    user_id = message.from_user.id
    reminders_list = await get_reminders(user_id)
    caption = ""
    for title, description, creation_date, completion_date in reminders_list:
        if title:
            user_date_format = await check_date_format(user_id)
            today_date = datetime.now().strftime("%d/%m/%Y %H:%M") if user_date_format == 0 else datetime.now().strftime("%d.%m.%Y %H:%M")
            today_formated_date = datetime.strptime(today_date, "%d/%m/%Y %H:%M") if user_date_format == 0 else datetime.strptime(today_date, "%d.%m.%Y %H:%M")
            
            if description != " ":
                caption += f"""

–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>
–û–ø–∏—Å–∞–Ω–∏–µ: {description}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{creation_date}</b>
–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{completion_date}</b>
"""
            else:
                caption += f"""
                
–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{creation_date}</b>
–î–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{completion_date}</b>
"""
    await message.answer_photo(photo="https://us.123rf.com/450wm/mbezvodinskikh/mbezvodinskikh2106/mbezvodinskikh210600012/170725861-bloc-de-notas-vac%C3%ADo-violeta-sobre-fondo-pastel-ilustraci%C3%B3n-de-procesamiento-3d-simple.jpg?ver=6",
                               caption="üìñ <b>–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>" + caption, parse_mode="HTML")


@router.callback_query(F.data == "one_minute")
async def add_one_minute(callback: CallbackQuery):
    users = await get_all_users()
    for user_id in users:
        user_date_format = await check_date_format(user_id)
        reminders = await get_reminders(user_id)
        for title, description, creation_date, completion_date in reminders:
            pass